# Double 34463338 and store in 63
1102
34463338
3446333
63
# arg stored in 63 (1187721666102244) < 34463338 ? false = write 0 to 63
1007
63
34463338
63
# 63 != 0 ? false = nothing
1005
63
53
# multiple 3 by 1 and store in 1000
1102
3
1
1000
# Add 988 to rb
109
988
# Add value stored in relative + 12 (3) to rb
209
12
# Add value stored in 1000 to rb
9
1000
# Add relative + 6 (3) to rb
209
6
# Add relative + 3 (3) to rb
209
3
# Input (1) and store in relative + 0 (1000)
203
0
# If value stored in 1000 = 1000 (immediate) (1=1) ? write 1 to 63
1008
1000
1
63
# If first arg != 0, jump to second arg (65) (v in 63 = 1 which != 0)
1005
63
65

1008
1000
2
63
1005
63
904
1008
1000
0
63
1005
63
58
4
25
104
0
99
4
0
104
0
99
4
17
104
0
99
0
0
# first "jump" (from PC 12)
# multiple 521 by 1 and store in 1028
1102
521
1
1028
# Add 36 to 0 and store in 1000
1101
0
36
1000
# Multiple 30 by 1 and store in 1005
1102
30
1
1005
# add 21 to 0 and store in 1013
1101
21
0
1013
# adds 26 to 0 and store in 1006
1101
26
0
1006
# mltiple 31 by 1 and store in 1017
1102
31
1
1017
# Adds 24 to 0 and store in 1007
1101
24
0
1007
# Adds 0 to 1 and store in 1021
1101
0
1
1021
# multiple 27 by 1 and store in 1019
1102
27
1
1019
# adds 23 to 0 and store in 1010
1101
23
0
1010
# adds 0 to 38 and store in 1012
1101
0
38
1012
# multiple 35 by 1 and store in 1001
1102
35
1
1001
# adds 25 to 0 and store in 1003
1101
25
0
1003
# multiple 20 by 1 and store in 1004
1102
20
1
1004
# adds 0 to 37 and store in 1009
1101
0
37
1009
# adds 424 to 0 and store in 1023
1101
424
0
1023
# multiple 39 by 1 and store in 1008
1102
39
1
1008
# multiple 406 by 1 and store in 1027
1102
406
1
1027
# multiple 1 by 413 and store in 1026
1102
1
413
1026
# add 0 to 29 and store in 1002
1101
0
29
1002
# multiple 1 by 0 and store in 1020
1102
1
0
1020
# multiple 34 by 1 and store in 1014
1102
34
1
1014
# multiple 1 by 28 and store in 1018
1102
1
28
1018
# multiple 33 by 1 and store in 1011
1102
1
33
1011
# multiple 300 by 1 and store in 1025
1102
300
1
1025
# multiple 1 by 22 and store in 1015
1102
1
22
1015
# multiple 305 by 1 and store in 1024
1102
305
1
1024
# add 32 to 0 and store in 1016
1101
32
0
1016
# multiple 427 by 1 and store in 1022
1102
427
1
1022
# add 512 to 0 and store in 1029
1101
512
0
1029
# add 14 to rb
109
14
# if rb + 6 (1020 -> 0) != 0 (false) = nothing
1205
6
197
# add value stored in 64 to 1 and store in 64
1001
64
1
64
# if 0 is 0 jump (0=0) so pos 199
1106
0
199
4
187
# second "jump" (194)
# multiple value stored in 64 by 2 and store in 64
1002
64
2
64
# add -18 to rb
109
-18
# if vsi rb + 8 < 19 write 1 to 63 else 0
1207
8
19
63
# value stored in 63 != 0 ? (False) nothing
1005
63
215
# 1 != 0 ? (true) jump to 221
1105
1
221
4
205
1001
64
1
64
# third "jump" (214)
# multiple value stored in 64 by 2 and store in 64
1002
64
2
64
# add 10 to rb
109
10
# if vsi r -1 = 28 ? (false) write 0 to 63
1208
-1
28
63
# value stored in 63 != 0 ? (false) nothing
1005
63
237
# jump to 243 (forced, 0 != 0)
1106
0
243
4
227
1001
64
1
64
# fouth "jump" (234)
# multiple value stored in 64 by 2 and store in 64
1002
64
2
64
# add -2 to rb
109
-2
# multiple value stored in rb + 0 by 1 and store in 63
2102
1
0
63
# if value stored in 63 = 22 ? (false) write 0 to 63
1008
63
22
63
# if value stored in 63 != 0 (false) nothing
1005
63
263
# forced jump to 269
1105
1
269
4
249
1001
64
1
64
# fifth "jump" (261)
# multiple value stored in 64 by 2
1002
64
2
64
# add 11 to rb
109
11
# if first arg < second arg (false) write 0 to r + 0
# NOTE: PROGRAM BREAKS HERE
21107
40
39
0
# if arg stored in 1015 != 0 (false) nothing
1005
1015
289
# add value stored in 64 to 1 and store in 64
1001
64
1
64
# force jump to 291
1106
0
291
4
275
# sixth "jump" (286)
# multiple  value stored in 64 by 2 and store in 64
1002
64
2
64
# add 9 to rb
109
9
# 1 != 0 (true) jump to r + 0
2105
1
0
4
297
1105
1
309
1001
64
1
64
1002
64
2
64
109
-13
2101
0
-5
63
1008
63
25
63
1005
63
329
1105
1
335
4
315
1001
64
1
64
1002
64
2
64
109
1
1206
8
353
4
341
1001
64
1
64
1105
1
353
1002
64
2
64
109
3
2108
37
-6
63
1005
63
375
4
359
1001
64
1
64
1106
0
375
1002
64
2
64
109
-16
1207
2
36
63
1005
63
397
4
381
1001
64
1
64
1105
1
397
1002
64
2
64
109
28
2106
0
0
1001
64
1
64
1106
0
415
4
403
1002
64
2
64
109
-3
2105
1
-1
1106
0
433
4
421
1001
64
1
64
1002
64
2
64
109
-12
2108
25
-6
63
1005
63
449
1105
1
455
4
439
1001
64
1
64
1002
64
2
64
109
-19
1202
8
1
63
1008
63
38
63
1005
63
479
1001
64
1
64
1105
1
481
4
461
1002
64
2
64
109
14
2107
25
0
63
1005
63
497
1105
1
503
4
487
1001
64
1
64
1002
64
2
64
109
24
2106
0
-3
4
509
1001
64
1
64
1105
1
521
1002
64
2
64
109
-20
1208
-2
37
63
1005
63
543
4
527
1001
64
1
64
1106
0
543
1002
64
2
64
109
7
21102
41
1
0
1008
1018
43
63
1005
63
563
1105
1
569
4
549
1001
64
1
64
1002
64
2
64
109
-7
1205
10
587
4
575
1001
64
1
64
1106
0
587
1002
64
2
64
109
-11
1202
5
1
63
1008
63
30
63
1005
63
609
4
593
1106
0
613
1001
64
1
64
1002
64
2
64
109
4
1201
5
0
63
1008
63
34
63
1005
63
637
1001
64
1
64
1105
1
639
4
619
1002
64
2
64
109
12
1206
5
651
1105
1
657
4
645
1001
64
1
64
1002
64
2
64
109
9
21101
42
0
-7
1008
1018
39
63
1005
63
677
1105
1
683
4
663
1001
64
1
64
1002
64
2
64
109
-2
21101
43
0
-8
1008
1015
43
63
1005
63
705
4
689
1106
0
709
1001
64
1
64
1002
64
2
64
109
-25
2107
38
10
63
1005
63
727
4
715
1106
0
731
1001
64
1
64
1002
64
2
64
109
7
2102
1
2
63
1008
63
24
63
1005
63
757
4
737
1001
64
1
64
1105
1
757
1002
64
2
64
109
-13
1201
10
0
63
1008
63
29
63
1005
63
779
4
763
1105
1
783
1001
64
1
64
1002
64
2
64
109
30
21108
44
41
-3
1005
1019
803
1001
64
1
64
1106
0
805
4
789
1002
64
2
64
109
-2
21102
45
1
-7
1008
1013
45
63
1005
63
827
4
811
1105
1
831
1001
64
1
64
1002
64
2
64
109
-16
21107
46
47
7
1005
1011
849
4
837
1106
0
853
1001
64
1
64
1002
64
2
64
109
9
21108
47
47
0
1005
1013
875
4
859
1001
64
1
64
1106
0
875
1002
64
2
64
109
-10
2101
0
2
63
1008
63
30
63
1005
63
901
4
881
1001
64
1
64
1105
1
901
4
64
99
21102
1
27
1
21102
1
915
0
1106
0
922
21201
1
51805
1
204
1
99
109
3
1207
-2
3
63
1005
63
964
21201
-2
-1
1
21101
942
0
0
1106
0
922
22101
0
1
-1
21201
-2
-3
1
21101
0
957
0
1105
1
922
22201
1
-1
-2
1105
1
968
21201
-2
0
-2
109
-3
2105
1
0
